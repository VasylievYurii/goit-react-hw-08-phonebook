{"version":3,"file":"static/js/11.c87c83bb.chunk.js","mappings":"6OAEaA,EAA+BC,EAAAA,KAAaC,MAAM,CAC7DC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,YACpDE,SAAUP,EAAAA,KACPK,SAAS,yBACTF,IAAI,EAAG,sDACPK,QAAQ,WAAY,8C,mBCRZC,EAAiBC,EAAAA,EAAAA,IAAH,+XAkBdC,EAAgBD,EAAAA,EAAAA,IAAH,sBAEbE,GAAcF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,6QAcXI,EAASJ,EAAAA,EAAAA,OAAH,6cAkBNK,EAAYL,EAAAA,EAAAA,MAAH,iFAMTM,GAAmBN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,0HAMhBQ,GAAYR,EAAAA,EAAAA,GAAOS,EAAAA,GAAPT,CAAH,ySAgBTU,EAAQV,EAAAA,EAAAA,IAAH,oP,2FCjEZW,EAAgB,CACpBnB,KAAM,GACNI,MAAO,GACPC,SAAU,IAiDZ,EA9CyB,WACvB,IAAMe,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAOxB,OACE,UAAChB,EAAD,YACE,SAACE,EAAD,WACE,SAAC,KAAD,CACEU,cAAeA,EACfO,iBAAkB7B,EAClB8B,SAXa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BT,GAASU,EAAAA,EAAAA,IAASF,IAClBC,GACD,EAKK,UAKE,UAACnB,EAAD,YACE,SAACG,EAAD,CAAWkB,QAAST,EAApB,SAAiC,UACjC,SAACN,EAAD,CAAWgB,KAAK,OAAOhC,KAAK,OAAOiC,GAAIX,EAAanB,UAAQ,KAC5D,SAACW,EAAD,CAAkBd,KAAK,OAAOkC,UAAU,IAAIC,UAAU,WAEtD,SAACtB,EAAD,CAAWkB,QAASP,EAApB,SAAkC,WAClC,SAACR,EAAD,CAAWgB,KAAK,QAAQhC,KAAK,QAAQiC,GAAIT,EAAcrB,UAAQ,KAC/D,SAACW,EAAD,CAAkBd,KAAK,QAAQkC,UAAU,IAAIC,UAAU,WAEvD,SAACtB,EAAD,CAAWkB,QAASN,EAApB,SAAqC,cACrC,SAACT,EAAD,CACEgB,KAAK,WACLhC,KAAK,WACLiC,GAAIR,EACJtB,UAAQ,KAEV,SAACW,EAAD,CAAkBd,KAAK,WAAWkC,UAAU,IAAIC,UAAU,WAE1D,SAACvB,EAAD,CAAQoB,KAAK,SAAb,SAAsB,yBAI5B,SAACd,EAAD,CAAOkB,IAAKC,EAAUC,IAAI,gBAG/B,EC7DD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C","sources":["js/validationRegistrationSchema.js","components/FormRegistration/FormRegistration.styled.js","components/FormRegistration/FormRegistration.jsx","pages/Registration.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validationRegistrationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string()\n    .required('No password provided.')\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  flex-direction: column;\n  padding-left: 40px;\n  padding-right: 40px;\n  gap: 40px;\n  @media screen and (min-width: 760px) {\n    flex-direction: row;\n    padding-top: 40px;\n  }\n  @media screen and (min-width: 860px) {\n    padding-left: 80px;\n    padding-right: 80px;\n  }\n`;\n\nexport const FormikWrapper = styled.div``;\n\nexport const FormWrapper = styled(Form)`\n  font-size: 14px;\n  padding: 1em;\n  display: flex;\n  flex-direction: column;\n  @media screen and (min-width: 760px) {\n    font-size: 24px;\n    min-width: 300px;\n  }\n  @media screen and (min-width: 1280px) {\n    min-width: 400px;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-top: 10px;\n  font-family: inherit;\n  font-size: inherit;\n  background-color: #34398b;\n  border-radius: 28px;\n  border: #42e7e0 2px solid;\n  color: #fff;\n  padding: 5px 20px 10px 20px;\n  cursor: pointer;\n  transition: background-color 500ms var(--timing-function),\n    font-weight 300ms var(--timing-function), color 300ms var(--timing-function);\n  &:hover {\n    color: #11074e;\n    background-color: #42e7e0;\n  }\n`;\n\nexport const LabelForm = styled.label`\n  font-size: 1em;\n  font-weight: 300;\n  color: white;\n`;\n\nexport const ErrorMessageForm = styled(ErrorMessage)`\n  font-family: 'Arial', sans-serif;\n  font-size: 0.6em;\n  margin-bottom: 1.4em;\n  color: red;\n`;\nexport const FieldForm = styled(Field)`\n  width: 100%;\n  border: none;\n  border-radius: 4px;\n  margin: 8px 0;\n  margin-bottom: 14px;\n  outline: none;\n  padding: 8px;\n  box-sizing: border-box;\n  transition: 0.3s;\n  padding-right: 30px;\n  &:focus {\n    box-shadow: 0 0 8px 0 var(--color-contacts);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 80%;\n  @media screen and (min-width: 460px) {\n    width: 60%;\n  }\n  @media screen and (min-width: 860px) {\n    max-width: 500px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 600px;\n  }\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport { validationRegistrationSchema } from '../../js/validationRegistrationSchema';\nimport {\n  ContentWrapper,\n  FormikWrapper,\n  FormWrapper,\n  Button,\n  LabelForm,\n  ErrorMessageForm,\n  FieldForm,\n  Image,\n} from './FormRegistration.styled';\nimport ImagePng from '../../img/registrationImg.png';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst FormRegistration = () => {\n  const dispatch = useDispatch();\n  const inputNameId = nanoid();\n  const inputEmailId = nanoid();\n  const inputPasswordId = nanoid();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <ContentWrapper>\n      <FormikWrapper>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationRegistrationSchema}\n          onSubmit={handleSubmit}\n        >\n          <FormWrapper>\n            <LabelForm htmlFor={inputNameId}>Name</LabelForm>\n            <FieldForm type=\"text\" name=\"name\" id={inputNameId} required />\n            <ErrorMessageForm name=\"name\" component=\"p\" className=\"error\" />\n\n            <LabelForm htmlFor={inputEmailId}>Email</LabelForm>\n            <FieldForm type=\"email\" name=\"email\" id={inputEmailId} required />\n            <ErrorMessageForm name=\"email\" component=\"p\" className=\"error\" />\n\n            <LabelForm htmlFor={inputPasswordId}>Password</LabelForm>\n            <FieldForm\n              type=\"password\"\n              name=\"password\"\n              id={inputPasswordId}\n              required\n            />\n            <ErrorMessageForm name=\"password\" component=\"p\" className=\"error\" />\n\n            <Button type=\"submit\">Registration</Button>\n          </FormWrapper>\n        </Formik>\n      </FormikWrapper>\n      <Image src={ImagePng} alt=\"PHONEBOOK\" />\n    </ContentWrapper>\n  );\n};\n\nexport default FormRegistration;\n","import FormRegistration from 'components/FormRegistration/FormRegistration';\nimport React from 'react';\n\nconst Registration = () => {\n  return <FormRegistration />;\n};\n\nexport default Registration;\n"],"names":["validationRegistrationSchema","Yup","shape","name","min","max","required","email","password","matches","ContentWrapper","styled","FormikWrapper","FormWrapper","Form","Button","LabelForm","ErrorMessageForm","ErrorMessage","FieldForm","Field","Image","initialValues","dispatch","useDispatch","inputNameId","nanoid","inputEmailId","inputPasswordId","validationSchema","onSubmit","values","resetForm","register","htmlFor","type","id","component","className","src","ImagePng","alt"],"sourceRoot":""}