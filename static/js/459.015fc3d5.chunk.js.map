{"version":3,"file":"static/js/459.015fc3d5.chunk.js","mappings":"8OAEaA,EAAwBC,EAAAA,KAAaC,MAAM,CACtDC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,EAAAA,KACPG,SAAS,yBACTE,IAAI,EAAG,sDACPC,QAAQ,WAAY,8C,mBCJZC,EAAiBC,EAAAA,EAAAA,IAAH,qZAmBdC,EAAgBD,EAAAA,EAAAA,IAAH,sBAEbE,GAAcF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,6QAcXI,EAASJ,EAAAA,EAAAA,OAAH,6cAkBNK,EAAYL,EAAAA,EAAAA,MAAH,iFAMTM,GAAmBN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,0HAMhBQ,GAAYR,EAAAA,EAAAA,GAAOS,EAAAA,GAAPT,CAAH,ySAgBTU,EAAQV,EAAAA,EAAAA,IAAH,oP,oFClEZW,EAAgB,CACpBjB,MAAO,GACPE,SAAU,IA6CZ,EA1CkB,WAChB,IAAMgB,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAQxB,OACE,UAAChB,EAAD,YACE,SAACE,EAAD,WACE,SAAC,KAAD,CACEU,cAAeA,EACfM,iBAAkB1B,EAClB2B,SAZa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAI,UAAWH,GACvBP,GAASW,EAAAA,EAAAA,IAAMJ,IACfC,GACD,EAKK,UAKE,UAAClB,EAAD,YACE,SAACG,EAAD,CAAWmB,QAASV,EAApB,SAAkC,WAClC,SAACN,EAAD,CAAWiB,KAAK,QAAQC,KAAK,QAAQC,GAAIb,EAAcnB,UAAQ,KAC/D,SAACW,EAAD,CAAkBoB,KAAK,QAAQE,UAAU,IAAIC,UAAU,WAEvD,SAACxB,EAAD,CAAWmB,QAASR,EAApB,SAAqC,cACrC,SAACR,EAAD,CACEiB,KAAK,WACLC,KAAK,WACLC,GAAIX,EACJrB,UAAQ,KAEV,SAACW,EAAD,CAAkBoB,KAAK,WAAWE,UAAU,IAAIC,UAAU,WAE1D,SAACzB,EAAD,CAAQqB,KAAK,SAAb,SAAsB,kBAI5B,SAACf,EAAD,CAAOoB,IAAKC,EAAUC,IAAI,gBAG/B,ECxDD,EAJc,WACZ,OAAO,SAAC,EAAD,GACR,C","sources":["js/validationLogInSchema.js","components/FormLogin/FormLogin.styled.js","components/FormLogin/FormLogin.jsx","pages/Login.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validationLogInSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string()\n    .required('No password provided.')\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  flex-direction: column;\n  padding-left: 40px;\n  padding-right: 40px;\n  gap: 40px;\n  @media screen and (min-width: 760px) {\n    flex-direction: row;\n    padding-top: 40px;\n  }\n  @media screen and (min-width: 860px) {\n    /* gap: 60px; */\n    padding-left: 80px;\n    padding-right: 80px;\n  }\n`;\n\nexport const FormikWrapper = styled.div``;\n\nexport const FormWrapper = styled(Form)`\n  font-size: 14px;\n  padding: 1em;\n  display: flex;\n  flex-direction: column;\n  @media screen and (min-width: 760px) {\n    font-size: 24px;\n    min-width: 300px;\n  }\n  @media screen and (min-width: 1280px) {\n    min-width: 400px;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-top: 10px;\n  font-family: inherit;\n  font-size: inherit;\n  background-color: #34398b;\n  border-radius: 28px;\n  border: #42e7e0 2px solid;\n  color: #fff;\n  padding: 5px 20px 10px 20px;\n  cursor: pointer;\n  transition: background-color 500ms var(--timing-function),\n    font-weight 300ms var(--timing-function), color 300ms var(--timing-function);\n  &:hover {\n    color: #11074e;\n    background-color: #42e7e0;\n  }\n`;\n\nexport const LabelForm = styled.label`\n  font-size: 1em;\n  font-weight: 300;\n  color: white;\n`;\n\nexport const ErrorMessageForm = styled(ErrorMessage)`\n  font-family: 'Arial', sans-serif;\n  font-size: 0.6em;\n  margin-bottom: 1.4em;\n  color: red;\n`;\nexport const FieldForm = styled(Field)`\n  width: 100%;\n  border: none;\n  border-radius: 4px;\n  margin: 8px 0;\n  margin-bottom: 14px;\n  outline: none;\n  padding: 8px;\n  box-sizing: border-box;\n  transition: 0.3s;\n  padding-right: 30px;\n  &:focus {\n    box-shadow: 0 0 8px 0 var(--color-contacts);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 80%;\n  @media screen and (min-width: 460px) {\n    width: 60%;\n  }\n  @media screen and (min-width: 860px) {\n    max-width: 500px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 600px;\n  }\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport { validationLogInSchema } from '../../js/validationLogInSchema';\nimport {\n  ContentWrapper,\n  FormikWrapper,\n  FormWrapper,\n  Button,\n  LabelForm,\n  ErrorMessageForm,\n  FieldForm,\n  Image,\n} from './FormLogin.styled';\nimport ImagePng from '../../img/loginImg.png';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst FormLogin = () => {\n  const dispatch = useDispatch();\n  const inputEmailId = nanoid();\n  const inputPasswordId = nanoid();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log('values:', values);\n    dispatch(logIn(values));\n    resetForm();\n  };\n\n  return (\n    <ContentWrapper>\n      <FormikWrapper>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationLogInSchema}\n          onSubmit={handleSubmit}\n        >\n          <FormWrapper>\n            <LabelForm htmlFor={inputEmailId}>Email</LabelForm>\n            <FieldForm type=\"email\" name=\"email\" id={inputEmailId} required />\n            <ErrorMessageForm name=\"email\" component=\"p\" className=\"error\" />\n\n            <LabelForm htmlFor={inputPasswordId}>Password</LabelForm>\n            <FieldForm\n              type=\"password\"\n              name=\"password\"\n              id={inputPasswordId}\n              required\n            />\n            <ErrorMessageForm name=\"password\" component=\"p\" className=\"error\" />\n\n            <Button type=\"submit\">Login</Button>\n          </FormWrapper>\n        </Formik>\n      </FormikWrapper>\n      <Image src={ImagePng} alt=\"PHONEBOOK\" />\n    </ContentWrapper>\n  );\n};\n\nexport default FormLogin;\n","import React from 'react';\nimport FormLogin from 'components/FormLogin/FormLogin';\n\nconst Login = () => {\n  return <FormLogin></FormLogin>;\n};\n\nexport default Login;\n"],"names":["validationLogInSchema","Yup","shape","email","required","password","min","matches","ContentWrapper","styled","FormikWrapper","FormWrapper","Form","Button","LabelForm","ErrorMessageForm","ErrorMessage","FieldForm","Field","Image","initialValues","dispatch","useDispatch","inputEmailId","nanoid","inputPasswordId","validationSchema","onSubmit","values","resetForm","console","log","logIn","htmlFor","type","name","id","component","className","src","ImagePng","alt"],"sourceRoot":""}